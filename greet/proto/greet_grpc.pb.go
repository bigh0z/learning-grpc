// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: greet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetSserviceClient is the client API for GreetSservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetSserviceClient interface {
	Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error)
	GreetManyTimes(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (GreetSservice_GreetManyTimesClient, error)
}

type greetSserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetSserviceClient(cc grpc.ClientConnInterface) GreetSserviceClient {
	return &greetSserviceClient{cc}
}

func (c *greetSserviceClient) Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error) {
	out := new(GreetResponse)
	err := c.cc.Invoke(ctx, "/greet.GreetSservice/Greet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetSserviceClient) GreetManyTimes(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (GreetSservice_GreetManyTimesClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetSservice_ServiceDesc.Streams[0], "/greet.GreetSservice/GreetManyTimes", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetSserviceGreetManyTimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetSservice_GreetManyTimesClient interface {
	Recv() (*GreetResponse, error)
	grpc.ClientStream
}

type greetSserviceGreetManyTimesClient struct {
	grpc.ClientStream
}

func (x *greetSserviceGreetManyTimesClient) Recv() (*GreetResponse, error) {
	m := new(GreetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetSserviceServer is the server API for GreetSservice service.
// All implementations must embed UnimplementedGreetSserviceServer
// for forward compatibility
type GreetSserviceServer interface {
	Greet(context.Context, *GreetRequest) (*GreetResponse, error)
	GreetManyTimes(*GreetRequest, GreetSservice_GreetManyTimesServer) error
	mustEmbedUnimplementedGreetSserviceServer()
}

// UnimplementedGreetSserviceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetSserviceServer struct {
}

func (UnimplementedGreetSserviceServer) Greet(context.Context, *GreetRequest) (*GreetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedGreetSserviceServer) GreetManyTimes(*GreetRequest, GreetSservice_GreetManyTimesServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetManyTimes not implemented")
}
func (UnimplementedGreetSserviceServer) mustEmbedUnimplementedGreetSserviceServer() {}

// UnsafeGreetSserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetSserviceServer will
// result in compilation errors.
type UnsafeGreetSserviceServer interface {
	mustEmbedUnimplementedGreetSserviceServer()
}

func RegisterGreetSserviceServer(s grpc.ServiceRegistrar, srv GreetSserviceServer) {
	s.RegisterService(&GreetSservice_ServiceDesc, srv)
}

func _GreetSservice_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetSserviceServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.GreetSservice/Greet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetSserviceServer).Greet(ctx, req.(*GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetSservice_GreetManyTimes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GreetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetSserviceServer).GreetManyTimes(m, &greetSserviceGreetManyTimesServer{stream})
}

type GreetSservice_GreetManyTimesServer interface {
	Send(*GreetResponse) error
	grpc.ServerStream
}

type greetSserviceGreetManyTimesServer struct {
	grpc.ServerStream
}

func (x *greetSserviceGreetManyTimesServer) Send(m *GreetResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GreetSservice_ServiceDesc is the grpc.ServiceDesc for GreetSservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetSservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet.GreetSservice",
	HandlerType: (*GreetSserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _GreetSservice_Greet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetManyTimes",
			Handler:       _GreetSservice_GreetManyTimes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "greet.proto",
}
